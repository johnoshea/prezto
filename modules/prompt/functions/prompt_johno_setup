# My theme with quite a few bells and whistles:
#
# * Single-line prompt
# * Left side prompt
#   * VPN status display
#   * Command history number display
#   * Hides hostname if not ssh'ed into a remote system
#   * Indicates backgrounded jobs
#   * Indicates non-zero return code from the last command
#   * Prompt shows number of nested shells
#   * Prompt changes color if the user has root privileges
# * Right side prompt (hides if typing would overlap it)
#   * Shows duration of last command
#   * Git branch & file status display (modified/staged/untracked)
#   * Current path display
#
# Lots of ideas taken from Greg Hurrell's .zshrc:
# https://github.com/wincent/wincent/blob/master/roles/dotfiles/files/.zshrc
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#   John O'Shea <john.m.oshea@gmail.com>
#   Greg Hurrell <wincent.org>
#
# Screenshots:
#   #TODO upload screenshot somewhere


# Variables --------------------------------------------------------------- {{{
typeset -gA __JOHNO
typeset -F SECONDS
# }}}


# Hooks ------------------------------------------------------------------- {{{
function prompt_johno_preexec {
  -record-command
  -record-start-time
}

function prompt_johno_precmd {
  -report-start-time
  -maybe-show-vcs-info
  -set-vpn-status
}
# }}}


# VPN status display ------------------------------------------------------ {{{
function -set-vpn-status {
  local tunnel_up=$(ifconfig -a | egrep -A1 '^utun' 2> /dev/null | egrep 'inet ' | tr -d ' ')
  if [[ -n "$tunnel_up" ]]; then
    export WORK_VPN=1
    export PROMPT="%K{blue}%F{white} VPN %f%k $PROMPT_BASE"
  else
    unset WORK_VPN
    export PROMPT="$PROMPT_BASE"
  fi
}
# }}}


# VCS functions ----------------------------------------------------------- {{{
function +vi-hg-bookmarks {
  emulate -L zsh
  if [[ -n "${hook_com[hg-active-bookmark]}" ]]; then
    hook_com[hg-bookmark-string]="${(Mj:,:)@}"
    ret=1
  fi
}

function +vi-hg-message {
  emulate -L zsh
  # Suppress hg branch display if we can display a bookmark instead.
  if [[ -n "${hook_com[misc]}" ]]; then
    hook_com[branch]=''
  fi
  return 0
}

function +vi-git-untracked {
  emulate -L zsh
  if [[ -n $(git ls-files --exclude-standard --others 2> /dev/null) ]]; then
    hook_com[unstaged]+="%F{blue}●%f"
  fi
}

# Update vcs_info (slow) after any command that probably changed it.
function -maybe-show-vcs-info {
  local LAST="$__JOHNO[LAST_COMMAND]"

  # In case user just hit enter, overwrite LAST_COMMAND, because preexec
  # won't run and it will otherwise linger.
  __JOHNO[LAST_COMMAND]="<unset>"

  # Check first word; via:
  # http://tim.vanwerkhoven.org/post/2012/10/28/ZSH/Bash-string-manipulation
  case "$LAST[(w)1]" in
    cd|cp|git|rm|touch|mv|)
      vcs_info
      ;;
    *)
      ;;
  esac
}
# }}}


# Timing functions -------------------------------------------------------- {{{
function -record-start-time {
    emulate -L zsh
    ZSH_START_TIME=${ZSH_START_TIME:-$SECONDS}
}

function -report-start-time {
    emulate -L zsh
    if [ $ZSH_START_TIME ]; then
        local DELTA=$(($SECONDS - $ZSH_START_TIME))
        local DAYS=$((~~($DELTA / 86400)))
        local HOURS=$((~~(($DELTA - $DAYS * 86400) / 3600)))
        local MINUTES=$((~~(($DELTA - $DAYS * 86400 - $HOURS * 3600) / 60)))
        local SECS=$(($DELTA - $DAYS * 86400 - $HOURS * 3600 - $MINUTES * 60))
        local ELAPSED=''
        test "$DAYS" != '0' && ELAPSED="${DAYS}d"
        test "$HOURS" != '0' && ELAPSED="${ELAPSED}${HOURS}h"
        test "$MINUTES" != '0' && ELAPSED="${ELAPSED}${MINUTES}m"
        if [ "$ELAPSED" = '' ]; then
            SECS="$(print -f "%.2f" $SECS)s"
        elif [ "$DAYS" != '0' ]; then
            SECS=''
        else
            SECS="$((~~$SECS))s"
        fi
        ELAPSED="${ELAPSED}${SECS}"
        export RPROMPT="%F{yellow}${ELAPSED}%f $RPROMPT_BASE"
        unset ZSH_START_TIME
    else
        export RPROMPT="$RPROMPT_BASE"
    fi
}

function -record-command {
  __JOHNO[LAST_COMMAND]="$2"  # Remember each command we run.
}
# }}}


# 'cd after ls' ----------------------------------------------------------- {{{
function -auto-ls-after-cd() {
  emulate -L zsh
  # Only in response to a user-initiated `cd`, not indirectly (eg. via another
  # function).
  if [ "$ZSH_EVAL_CONTEXT" = "toplevel:shfunc" ]; then
    ls -a
  fi
}
# }}}



# Main prompt setup ------------------------------------------------------- {{{
function prompt_johno_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  prompt_opts=(cr percent subst)

  # Load required functions
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  # Add hooks
  add-zsh-hook preexec prompt_johno_preexec
  add-zsh-hook precmd prompt_johno_precmd
  add-zsh-hook chpwd -auto-ls-after-cd

  zstyle ':vcs_info:*' enable git hg
  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' stagedstr "%F{green}●%f" # default 'S'
  zstyle ':vcs_info:*' unstagedstr "%F{red}●%f" # default 'U'
  zstyle ':vcs_info:*' use-simple true
  zstyle ':vcs_info:git+set-message:*' hooks git-untracked
  zstyle ':vcs_info:git*:*' formats '[⎇ %b: %m%c%u] ' # default ' (%s)-[%b]%c%u-'
  zstyle ':vcs_info:git*:*' actionformats '[%b|%a%m%c%u] ' # default ' (%s)-[%b|%a]%c%u-'
  zstyle ':vcs_info:hg*:*' formats '[%m%b] '
  zstyle ':vcs_info:hg*:*' actionformats '[%b|%a%m] '
  zstyle ':vcs_info:hg*:*' branchformat '%b'
  zstyle ':vcs_info:hg*:*' get-bookmarks true
  zstyle ':vcs_info:hg*:*' get-revision true
  zstyle ':vcs_info:hg*:*' get-mq false
  zstyle ':vcs_info:hg*+gen-hg-bookmark-string:*' hooks hg-bookmarks
  zstyle ':vcs_info:hg*+set-message:*' hooks hg-message

  local TMUXING=$([[ "$TMUX" =~ "tmux" ]] && echo tmux)
  if [ -n "$TMUXING" -a -n "$TMUX" ]; then
    # In a a tmux session created in a non-root or root shell.
    local LVL=$(($SHLVL - 1))
  else
    # Either in a root shell created inside a non-root tmux session,
    # or not in a tmux session.
    local LVL=$SHLVL
  fi
  if [[ $EUID -eq 0 ]]; then
    local SUFFIX='%F{yellow}%n%f'$(printf '%%F{yellow}\u276f%.0s%%f' {1..$LVL})
  else
    local SUFFIX=$(printf '%%F{red}\u276f%.0s%%f' {1..$LVL})
  fi
  if [[ -n "$TMUXING" ]]; then
    # Outside tmux, ZLE_RPROMPT_INDENT ends up eating the space after PS1, and
    # prompt still gets corrupted even if we add an extra space to compensate.
    export ZLE_RPROMPT_INDENT=0
  fi

  PROMPT_TITLE=$(echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007")

  if [[ -n "$SSH_TTY" ]]; then
    host_name="%F{green}%n@%m%f "
  else
    host_name="%F{green}%n%f "
  fi

  hist_num="%F{cyan}%!%f"
  jobs_running="%F{yellow}%B%(1j.*.)%b%f"
  non_zero_result="%F{yellow}%B%(?..!)%b%f"

  PROMPT_BASE="${hist_num} ${host_name}${jobs_running}${non_zero_result}%B${SUFFIX}%b "
  RPROMPT_BASE="\${vcs_info_msg_0_}%F{blue}%~%f"
  SPROMPT="zsh: correct %F{red}'%R'%f to %F{green}'%r'%f [%B%Uy%u%bes, %B%Un%u%bo, %B%Ue%u%bdit, %B%Ua%u%bbort]? "
}
# }}}


prompt_johno_setup "$@"
